"""
Sample: Evaluatuate all scenes

This module demonstrates evaluating data from all scene using the stereomideval module.
For demonstration purposes the test data is generated by adding noise to the ground truth
"""
import os
import numpy as np
from stereomideval import Dataset, Eval
from i3drsgm import I3DRSGM
import ssl

dataset_folder = os.path.join(os.getcwd(),"datasets") #Path to dowmload datasets

# Create dataset folder
if not os.path.exists(dataset_folder):
    os.makedirs(dataset_folder)

# Initalise stereomideval objects
stmid_dataset = Dataset()
stmid_eval = Eval()

# SSL Verificaiton may be need if you get the following error:
# "urllib.error.URLError: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1091)>"
ssl._create_default_https_context = ssl._create_unverified_context

i3drsgm = I3DRSGM()
if i3drsgm.isInit():
    # Set matcher parameters
    i3drsgm.setDisparityRange(0)
    i3drsgm.setDisparityRange(3264)
    i3drsgm.enableInterpolation(False)

    # Get list of scenes in Milddlebury's stereo dataset (2014) and iterate through them
    for scene_name in stmid_dataset.get_scene_list():
        # Download dataset from middlebury servers
        # will only download it if it hasn't already been downloaded
        print("Downloading data for scene '"+scene_name+"'...")
        stmid_dataset.download_scene_data(scene_name,dataset_folder)
        # Load scene data from downloaded folder
        print("Loading data for scene '"+scene_name+"'...")
        scene_data = stmid_dataset.load_scene_data(scene_name,dataset_folder,True,1)
        # Get test data and ground truth
        left_image = scene_data.left_image
        right_image = scene_data.right_image
        gt_disp_image = scene_data.disp_image
        # Stereo match image pair
        print("Running I3DRSGM on images...")
        valid, test_disp_image = i3drsgm.forwardMatch(left_image,right_image)
        if valid:
            # Evaluate stereo match
            rmse = stmid_eval.rmse(gt_disp_image,test_disp_image)
            bad_pix_error = stmid_eval.bad_pix_error(gt_disp_image,test_disp_image)
            print("RMSE: {:.2f}".format(rmse))
            print("Bad pixel 2.0: {:.2f}%".format(bad_pix_error))
"""
Sample: Evaluatuate all scenes

This module demonstrates evaluating data from all scene using the stereomideval module.
For demonstration purposes the test data is generated by adding noise to the ground truth
"""
import os
import shutil
import glob
import numpy as np
from stereomideval.structures import MatchData
from stereomideval.dataset import Dataset
from stereomideval.eval import Eval, Timer
from i3drsgm import I3DRSGM

DATASET_FOLDER = os.path.join(os.getcwd(),"datasets") #Path to download datasets
EVAL_FOLDER = os.path.join(os.getcwd(),"evaluation") #Path to store evaluation
GET_METRIC_RANK = False
GET_AV_METRIC_RANK = True
MIN_DISP = 0
INTERP = False

# Create dataset folder
if not os.path.exists(DATASET_FOLDER):
    os.makedirs(DATASET_FOLDER)

# Create eval folder
if os.path.exists(EVAL_FOLDER):
    shutil.rmtree(EVAL_FOLDER)
os.makedirs(EVAL_FOLDER)

# Initalise I3DRSGM
license_files = glob.glob("*.lic")
if (len(license_files) <= 0):
    raise Exception("Failed to find license file in script directory.")
i3drsgm = I3DRSGM(license_files[0])
# Check initalisation was success
if i3drsgm.isInit():
    image_height, image_width = 0,0
    match_data_list = []
    # Get list of scenes in Milddlebury's stereo training dataset and iterate through them
    for scene_info in Dataset.get_training_scene_list():
        scene_name=scene_info.scene_name
        dataset_type=scene_info.dataset_type
        # Download dataset from middlebury servers
        # will only download it if it hasn't already been downloaded
        print("Downloading data for scene '"+scene_name+"'...")
        Dataset.download_scene_data(scene_name,DATASET_FOLDER,dataset_type)
        # Load scene data from downloaded folder
        print("Loading data for scene '"+scene_name+"'...")
        scene_data = Dataset.load_scene_data(
            scene_name=scene_name,dataset_folder=DATASET_FOLDER,
            dataset_type=dataset_type)
        left_image = scene_data.left_image
        right_image = scene_data.right_image
        ground_truth_disp_image = scene_data.disp_image
        ndisp = scene_data.ndisp

        disp_range = 16*ndisp

        # Get test data image dims
        new_image_height = left_image.shape[0]
        new_image_width = left_image.shape[1]
        if new_image_height != image_height or new_image_width != image_width:
            # Re generate i3drsgm if image height is different
            i3drsgm.close()
            i3drsgm = I3DRSGM("2020_02_21_I3DRWL001_WINDOWS.lic")
            # Set matcher parameters
            i3drsgm.setMinDisparity(MIN_DISP)
            i3drsgm.setDisparityRange(disp_range)
            i3drsgm.enableInterpolation(INTERP)
            image_height, image_width = new_image_height, new_image_width

        # Start timer
        timer = Timer()
        timer.start()

        # Stereo match image pair
        print("Running I3DRSGM on images...")
        valid, test_disp_image = i3drsgm.forwardMatch(left_image,right_image)

        # Record elapsed time for match
        elapsed_time = timer.elapsed()

        if valid:
            match_result = MatchData.MatchResult(
                left_image,right_image,ground_truth_disp_image,test_disp_image,elapsed_time,ndisp)
            match_data = MatchData(scene_info,match_result)
            match_data_list.append(match_data)
        else:
            i3drsgm.close()
            raise Exception("Match failed!")

    # Required to release memory
    i3drsgm.close()

    Eval.evaluate_match_data_list(match_data_list,GET_METRIC_RANK,GET_AV_METRIC_RANK)
else:
    # Required to release memory
    i3drsgm.close()
